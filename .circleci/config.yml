version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environments ${CIRCLE_WORKFLOW_ID:0:7}"
            # aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0
  working_directory: ~/UDAPEOPLE

jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Test back-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            # Do not use the --force option along with the command below in your local
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            # Do not use the --force option along with the command below in your local
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws cloudformation list-exports --query "Exports[?Name=='${CIRCLE_WORKFLOW_ID:0:7}-PublicIp'].Value" --no-paginate --output text) >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["98:18:fd:25:d7:fc:e5:d1:93:20:f6:d3:28:31:4a:d2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
            apk add --no-cache tar
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment

  run-migrations:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/8DgN88B8w6HPF8rQU4i1iV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache tar
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws cloudformation list-exports --query "Exports[?Name=='${CIRCLE_WORKFLOW_ID:0:7}-PublicIp'].Value" --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["98:18:fd:25:d7:fc:e5:d1:93:20:f6:d3:28:31:4a:d2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache tar
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            tar -C backend -czvf artifact.tar.gz .
            mv artifact.tar.gz .circleci/ansible/
      - run:
          name: ansible playbook
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
          environment:
            TYPEORM_CONNECTION: $TYPEORM_CONNECTION
            TYPEORM_HOST: $TYPEORM_HOST
            TYPEORM_USERNAME: $TYPEORM_USERNAME
            TYPEORM_PASSWORD: $TYPEORM_PASSWORD
            TYPEORM_DATABASE: $TYPEORM_DATABASE
            TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
            TYPEORM_ENTITIES: $TYPEORM_ENTITIES
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
